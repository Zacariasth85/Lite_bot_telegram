const { Telegraf, Markup } = require("telegraf");
const { TELEGRAM_BOT_TOKEN } = require("./config");
const { deepseekChat } = require("./services/deepseek-api");
const { attp, gpt4, playAudio, playVideo, ttp, welcome, deleteVideo, gerarImagem } = require("./services/spider-x-api");
const fs = require("fs");
const path = require("path");
const { chatWithGroq } = require("./services/groq_cloud.js");
const { deleteOldImages } = require("./Database/imagem");

// Verifica se o token do bot do Telegram est√° configurado
if (!TELEGRAM_BOT_TOKEN) {
  throw new Error("Token do bot do Telegram n√£o configurado!");
}

// Inicializa o bot do Telegram
const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// Comando de in√≠cio
bot.start((ctx) => {
  ctx.reply("Bem-vindo ao bot! Use /help para ver os comandos dispon√≠veis.");
});

// Comando de ajuda
bot.command("help", (ctx) => {
  ctx.reply(`
Comandos dispon√≠veis:
/playaudio <busca> - Toca um √°udio.
/playvideo <busca> - Toca um v√≠deo.
/gpt4 <texto> - Gera uma resposta usando GPT-4.
/attp <texto> - Cria um sticker ATT com o texto.
/ttp <texto> - Cria um sticker TTP com o texto.
/welcome <texto> <descri√ß√£o> <url da imagem> - Gera uma imagem de boas-vindas.
/deepseek.
/gerarimagem.
  `);
});


// Comandando /chat para interragir com o bot
bot.on("text", async (ctx, next) => {
  const message = ctx.message.text;

  // Se a mensagem come√ßar com "/", passa para os handlers de comando normalmente
  if (message.startsWith("/")) {
    return next();
  }

  // Caso contr√°rio, responde com a API da Groq
  ctx.reply("Pensando... ‚è≥");
  try {
    const response = await chatWithGroq(message);
    ctx.reply(response);
  } catch (error) {
    ctx.reply("Erro ao processar sua mensagem. Tente novamente mais tarde.");
  }
});

//Comando para gerar imagem
bot.command("gerarimagem", async (ctx) => {
  const text = ctx.message.text.split(" ").slice(1).join(" ");
  if (!text) {
    return ctx.reply("Voc√™ precisa informar uma descri√ß√£o para gerar a imagem!");
  }

  try {
    // Envia uma mensagem de carregamento
    await ctx.reply("Gerando imagem... ‚è≥");

    // Gera a imagem usando a API
    const { path, description } = await gerarImagem(text);

    // Envia a imagem gerada
    await ctx.replyWithPhoto({ source: fs.createReadStream(path) }, {
      caption: `üñºÔ∏è Imagem gerada para: "${description}"`,
    });

    // Exclui imagens antigas (mais de 7 dias)
    await deleteOldImages();
  } catch (error) {
    ctx.reply(`Erro: ${error.message}`);
  }
});


// Comando para interagir com a DeepSeek
bot.command("deepseek", async (ctx) => {
  const prompt = ctx.message.text.split(" ").slice(1).join(" ");
  if (!prompt) {
    return ctx.reply("Voc√™ precisa informar uma mensagem para a DeepSeek!");
  }

  try {
    const response = await deepseekChat(prompt);

    // Envia a resposta da DeepSeek
    await ctx.reply(response);
  } catch (error) {
    ctx.reply(`Erro: ${error.message}`);
  }
});

// Comando para tocar √°udio
bot.command("playaudio", async (ctx) => {
  const search = ctx.message.text.split(" ").slice(1).join(" ");
  if (!search) {
    return ctx.reply("Voc√™ precisa informar o que deseja buscar!");
  }

  try {
    // Envia uma mensagem de carregamento
    await ctx.reply("Carregando... ‚è≥");

    // Busca o √°udio usando a API
    const { name, url } = await playAudio(search);

    // Envia o nome da m√∫sica
    await ctx.reply(`üéµ ${name}`);

    // Envia o √°udio
    await ctx.replyWithAudio(url);
  } catch (error) {
    ctx.reply(`Erro: ${error.message}`);
  }
});

// Comando para tocar v√≠deo
bot.command("playvideo", async (ctx) => {
  const search = ctx.message.text.split(" ").slice(1).join(" ");
  if (!search) {
    return ctx.reply("Voc√™ precisa informar o que deseja buscar!");
  }

  try {
    // Envia uma mensagem de carregamento
    await ctx.reply("Carregando... ‚è≥");

    // Busca o v√≠deo usando a API
    const { id, path: videoPath, title } = await playVideo(search);

    // Envia o nome do v√≠deo
    await ctx.reply(`üé• ${title}`);

    // Envia o v√≠deo
    await ctx.replyWithVideo({ source: videoPath });

    // Ap√≥s o envio bem-sucedido, exclui o v√≠deo do banco de dados e do sistema
    await deleteVideo(id);
    fs.unlinkSync(videoPath);
  } catch (error) {
    ctx.reply(`Erro: ${error.message}`);
  }
});

// Comando para usar GPT-4
bot.command("gpt4", async (ctx) => {
  const text = ctx.message.text.split(" ").slice(1).join(" ");
  if (!text) {
    return ctx.reply("Voc√™ precisa informar o texto!");
  }

  try {
    const response = await gpt4(text);
    ctx.reply(response);
  } catch (error) {
    ctx.reply(`Erro: ${error.message}`);
  }
});

// Comando para gerar sticker ATT
bot.command("attp", async (ctx) => {
  const text = ctx.message.text.split(" ").slice(1).join(" ");
  if (!text) {
    return ctx.reply("Voc√™ precisa informar o texto!");
  }

  try {
    const stickerUrl = await attp(text);
    ctx.replyWithSticker(stickerUrl);
  } catch (error) {
    ctx.reply(`Erro: ${error.message}`);
  }
});

// Comando para gerar sticker TTP
bot.command("ttp", async (ctx) => {
  const text = ctx.message.text.split(" ").slice(1).join(" ");
  if (!text) {
    return ctx.reply("Voc√™ precisa informar o texto!");
  }

  try {
    const stickerUrl = await ttp(text);
    ctx.replyWithSticker(stickerUrl);
  } catch (error) {
    ctx.reply(`Erro: ${error.message}`);
  }
});

// Comando para gerar imagem de boas-vindas
bot.command("welcome", async (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);
  if (args.length < 3) {
    return ctx.reply("Voc√™ precisa informar o texto, descri√ß√£o e URL da imagem!");
  }

  const [text, description, imageURL] = args;
  try {
    const welcomeImageUrl = await welcome(text, description, imageURL);
    ctx.replyWithPhoto(welcomeImageUrl);
  } catch (error) {
    ctx.reply(`Erro: ${error.message}`);
  }
});

// Inicia o bot
bot.launch();

console.log("‚úÖBot iniciado com sucesso!üöÄ");

// Capturar erros
process.on("uncaughtException", (err) => console.error("Erro n√£o tratado:", err));
process.on("unhandledRejection", (err) => console.error("Rejei√ß√£o n√£o tratada:", err));
